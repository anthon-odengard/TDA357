----------------------------------------------------------------------------------------
-------------------------------------- DELETE ALL --------------------------------------
----------------------------------------------------------------------------------------
/*
\set QUIET true
SET client_min_messages TO WARNING;
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;
GRANT ALL ON SCHEMA public TO postgres;
SET client_min_messages TO NOTICE;
\set QUIET false
*/


----------------------------------------------------------------------------------------
---------------------------------------- PART 1 ----------------------------------------
----------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------
-------------------------------------- DATABASES ---------------------------------------
----------------------------------------------------------------------------------------

CREATE TABLE Students(
	idnr CHAR(10) NOT NULL,
	name TEXT NOT NULL,
	login TEXT NOT NULL, --osäker på typ här
	program TEXT NOT NULL,
	PRIMARY KEY(idnr)
	);

CREATE TABLE Branches(
	name TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY(name, program)
	);

CREATE TABLE Courses(
	code CHAR(6) NOT NULL,
	name TEXT NOT NULL,
	credits DECIMAL(3,1) NOT NULL, --3 nummer, 1 decimal
	department TEXT NOT NULL,
	PRIMARY KEY(code)
	);

CREATE TABLE LimitedCourses(
	code CHAR(6) NOT NULL,
	capacity INT, --not all courses have restriction on capacity
	PRIMARY KEY(code),
	FOREIGN KEY (code) REFERENCES Courses
	);

CREATE TABLE StudentBranches(
	student CHAR(10) NOT NULL,
	branch TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY(student),
	FOREIGN KEY (student) REFERENCES Students,
	FOREIGN KEY (branch, program) REFERENCES Branches
	);

CREATE TABLE Classifications(
	name TEXT NOT NULL,
	PRIMARY KEY(name)
	);

CREATE TABLE Classified(
	course CHAR(6) NOT NULL,
	classification TEXT NOT NULL,
	PRIMARY KEY(course, classification),
	FOREIGN KEY (course) REFERENCES Courses,
	FOREIGN KEY (classification) REFERENCES Classifications
	); --classification does not need to exist or be unique

CREATE TABLE MandatoryProgram(
	course CHAR(6) NOT NULL,
	classification TEXT NOT NULL,
	PRIMARY KEY (course, classification),
	FOREIGN KEY (course) REFERENCES Courses
	);

CREATE TABLE MandatoryBranch(
	course CHAR(6) NOT NULL,
	branch TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY (course, branch, program),
	FOREIGN KEY (course) REFERENCES Courses,
	FOREIGN KEY (branch, program) REFERENCES Branches
	);

CREATE TABLE RecommendedBranch(
	course CHAR(6) NOT NULL,
	branch TEXT NOT NULL,
	program TEXT NOT NULL,
	PRIMARY KEY (course, branch, program),
	FOREIGN KEY (course) REFERENCES Courses,
	FOREIGN KEY (branch, program) REFERENCES Branches
	);

CREATE TABLE Registered(
	student CHAR(10) NOT NULL,
	course CHAR(6) NOT NULL,
	PRIMARY KEY (student, course),
	FOREIGN KEY (student) REFERENCES Students,
	FOREIGN KEY (course) REFERENCES Courses
	);

CREATE TABLE Taken(
	student CHAR(10) NOT NULL,
	course CHAR(6) NOT NULL,
	grade CHAR(1) NOT NULL CHECK (grade IN ('U', '3', '4', '5')),
	PRIMARY KEY (student, course),
	FOREIGN KEY (student) REFERENCES Students,
	FOREIGN KEY (course) REFERENCES Courses
	);

CREATE TABLE WaitingList(
	student CHAR(10) NOT NULL,
	course CHAR(6) NOT NULL,
	position SERIAL,
	PRIMARY KEY (student, course),
	FOREIGN KEY (student) REFERENCES Students,
	FOREIGN KEY (course) REFERENCES Courses
	);


----------------------------------------------------------------------------------------
---------------------------------------- VIEWS -----------------------------------------
----------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW BasicInformation AS(
	SELECT idnr, name, login, Students.program, COALESCE(branch,'') AS branch
	FROM Students
	FULL JOIN StudentBranches
	ON (Students.idnr = StudentBranches.student)
	);

CREATE OR REPLACE VIEW FinishedCourses AS(
	SELECT student, course, grade, credits
	FROM Taken
	JOIN Courses
	ON (Taken.course = Courses.code)
	);

CREATE OR REPLACE VIEW PassedCourses AS(
	SELECT student, course, credits
	FROM Taken
	JOIN Courses
	ON (Taken.course = Courses.code)
	WHERE grade NOT IN ('U')
	);

CREATE OR REPLACE VIEW Registrations AS(
	(SELECT student, course, 'waiting' as status
	FROM WaitingList)
	UNION
	(SELECT student, course, 'registered' as status
	FROM Registered)
	);

CREATE OR REPLACE VIEW UnreadMandatory AS(
	SELECT student, course
	FROM ((	SELECT Students.idnr AS student, course -- Students.program
		FROM Students
		JOIN MandatoryProgram ON Students.program = MandatoryProgram.program)
		UNION
		(SELECT student, course
		FROM StudentBranches
		LEFT OUTER JOIN MandatoryBranch
		ON (StudentBranches.branch = MandatoryBranch.branch)
		AND (StudentBranches.program = MandatoryBranch.program))) AS mandatoryCourses
	WHERE (student, course) NOT IN (SELECT student, course FROM PassedCourses)
	);

CREATE OR REPLACE VIEW PathToGraduation AS(
	WITH pathGrad AS (
		SELECT idnr AS Student, totalCredits, mandatoryLeft, mathCredits, researchCredits, seminarCourses, recommendedCredits
		FROM(	SELECT *
			FROM Students

			LEFT OUTER JOIN
			
			(SELECT student, SUM(credits) AS totalCredits
			FROM passedcourses
			GROUP BY student) AS Total
			ON Students.idnr = Total.student
			
			LEFT JOIN
			
			(SELECT student, course AS mandatoryLeft
			FROM unreadmandatory) AS Mandatory
			ON Students.idnr = Mandatory.student

			LEFT OUTER JOIN

			(SELECT student, SUM(credits) AS mathCredits
			FROM PassedCourses
			LEFT OUTER JOIN Classified
			ON PassedCourses.course = Classified.course
			WHERE classification = 'math'
			GROUP BY student, PassedCourses.course, Classified.course,
			Classified.classification) AS Math
			ON Students.idnr = Math.student

			LEFT OUTER JOIN

			(SELECT student, SUM(credits) AS researchCredits
			FROM PassedCourses
			LEFT OUTER JOIN Classified
			ON PassedCourses.course = Classified.course
			WHERE classification = 'research'
			GROUP BY student, PassedCourses.course, Classified.course,
			Classified.classification) AS Research
			ON Students.idnr = Research.student

			LEFT OUTER JOIN

			(SELECT student, COUNT(classification) AS seminarCourses
			FROM Classified
			LEFT OUTER JOIN PassedCourses
			ON Classified.course = PassedCourses.course
			WHERE classification = 'seminar'
			GROUP BY student) AS Seminar
			ON Students.idnr = Seminar.student

			LEFT OUTER JOIN

			(SELECT SB.student, PC.credits AS recommendedCredits
			FROM StudentBranches SB
			JOIN RecommendedBranch RB
			ON (RB.branch, RB.program) = (SB.branch, SB.program)
			JOIN PassedCourses PC
			ON SB.student = PC.student
			AND PC.course = RB.course
			GROUP BY SB.student, RB.course, PC.credits) AS Recommended
			ON Students.idnr = Recommended.student
		) AS thisNameIsUnnecessary
	)
	SELECT student, totalCredits, mandatoryLeft, mathCredits, researchCredits, seminarCourses,
	CASE WHEN student NOT IN (SELECT student FROM UnreadMandatory)
		AND recommendedCredits >= 10
		AND mathCredits >= 20
		AND researchCredits >= 10
		AND seminarCourses >= 1
		THEN TRUE
		ELSE FALSE
		END
		AS qualified
	FROM pathGrad
	)





